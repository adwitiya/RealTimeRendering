#version 410

in vec3 n_eye;
in vec3 position_eye, normal_eye;

out vec4 frag_colour;
uniform mat4 view;
const float material_kd = 0.8;
const float material_ks = 0.8;
// fixed point light properties
vec3 light_position_world  = vec3 (0.0, 5.0, 5.0);
vec3 Ls = vec3 (1.0, 1.0, 1.0); // white specular colour
vec3 Ld = vec3 (0.7, 0.7, 0.7); // dull white diffuse light colour
vec3 La = vec3 (0.2, 0.2, 0.2); // grey ambient colour
  
// surface reflectance
vec3 Ks = vec3 (1.0, 1.0, 1.0); // fully reflect specular light
vec3 Kd = vec3 (0.30, 0.80, 0.10); // orange diffuse surface reflectance
vec3 Ka = vec3 (1.0, 1.0, 1.0); // fully reflect ambient light
float specular_exponent = 100.0; // specular 'power'


void main(){

// ambient intensity
	vec3 Ia = La * Ka;

	// diffuse intensity
	// raise light position to eye space
	vec3 light_position_eye = vec3 (view * vec4 (light_position_world, 1.0));
	vec3 distance_to_light_eye = light_position_eye - position_eye;
	vec3 direction_to_light_eye = normalize (distance_to_light_eye);
	float dot_prod = dot (direction_to_light_eye, normal_eye);
	dot_prod = max (dot_prod, 0.0);
	int levels = 3;
	float toon_shade_diff = floor(dot_prod*levels)/levels;
	vec3 Id = Ld * Kd * toon_shade_diff * material_kd; // final diffuse intensity
	
	// specular intensity
	vec3 surface_to_viewer_eye = normalize (-position_eye);	
	vec3 reflection_eye = reflect (-direction_to_light_eye, normal_eye);
	float dot_prod_specular = dot (reflection_eye, surface_to_viewer_eye);
	dot_prod_specular = max (dot_prod_specular, 0.0);
	float specular_factor = pow (dot_prod_specular, specular_exponent);	
	float toon_shade_spec = floor(specular_factor*levels)/levels;
	vec3 Is = Ls * Ks * toon_shade_spec * material_ks ; // final specular intensity
	
	// final colour
	frag_colour = vec4 (Is + Id + Ia, 1.0);
}